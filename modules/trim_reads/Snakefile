import os

def get_single_end_fastq_data(wildcards):
	if config['sequence_data_source'] == 'ENA' or config['sequence_data_source'] == 'SRA':
		return('data/single_end/{}.fastq.gz'.format(wildcards.accession))
	elif config['sequence_data_source'] == 'User':
		if os.path.isfile('data/single_end/{}.fastq.gz'.format(wildcards.accession)):
			return('data/single_end/{}.fastq.gz'.format(wildcards.accession))
		elif os.path.isfile('data/single_end/{}.fq.gz'.format(wildcards.accession)):
			return('data/single_end/{}.fq.gz'.format(wildcards.accession))
		else:
			raise Exception("You don't seem to have anything stored in data/single_end for {}".format(wildcards.accession))

def get_paired_end_fastq_data(wildcards):
        if config['sequence_data_source'] == 'ENA' or config['sequence_data_source'] == 'SRA':
                fastq_list = ['data/paired_end/{}_1.fastq.gz'.format(wildcards.accession),'data/paired_end/{}_2.fastq.gz'.format(wildcards.accession) ]
                return(fastq_list)
        elif config['sequence_data_source'] == 'User':
                if os.path.isfile('data/paired_end/{}_1.fastq.gz'.format(wildcards.accession)) and os.path.isfile('data/paired_end/{}_2.fastq.gz'.format(wildcards.accession)):
                        fastq_list = ['data/paired_end/{}_1.fastq.gz'.format(wildcards.accession),'data/paired_end/{}_2.fastq.gz'.format(wildcards.accession) ]
                        return(fastq_list)
                elif os.path.isfile('data/paired_end/{}_1.fq.gz'.format(wildcards.accession)) and os.path.isfile('data/paired_end/{}_2.fq.gz'.format(wildcards.accession)):
                        fastq_list = ['data/paired_end/{}_1.fq.gz'.format(wildcards.accession),'data/paired_end/{}_2.fq.gz'.format(wildcards.accession) ]
                        return(fastq_list)
                else:
                        raise Exception("You don't seem to have both mate files for {} stored in data/paired_end".format(wildcards.accession))

rule trim_single_end_reads:
       input: 
           get_single_end_fastq_data     
       output: 
           "results/trimmed_fastq/{accession}_trimmed.fq.gz"
       conda: 
          "envs/trim-galore.yaml"
       shell:
          "trim_galore --output_dir results/trimmed_fastq/  --length 35 --stringency 4 {input}"

rule trim_paired_end_reads:
       input:
           get_paired_end_fastq_data
       output:
           "results/trimmed_fastq/{accession}_1_val_1.fq.gz",
           "results/trimmed_fastq/{accession}_2_val_2.fq.gz"
       conda:
          "envs/trim-galore.yaml"
       shell:
          "trim_galore --output_dir results/trimmed_fastq/ --length 35 --stringency 4 --paired {input[0]} {input[1]}"
