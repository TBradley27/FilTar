#    FilTar: Integrating RNA-Seq data to improve microRNA target prediction accuracy in animals
#    Copyright (C) 2019 Thomas Bradley
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>


def get_dna_file(wildcards):
    sci_species_name = config["sci_species_name"][wildcards.species]
    genome_build = config["genome_build"][wildcards.species]

    return (
        "data/"
        + sci_species_name
        + "."
        + genome_build
        + ".dna.chromosome.{chrom}.fa".format(chrom=wildcards.chrom)
    )


def get_NCBI_taxonomic_id(wildcards):
    return config["tax_ids"][wildcards.species]


rule reformat_bed_file_for_bedtools:
    input:
        "results/bed/{species}_{tissue_tx_model}_{feature}.chr{chrom}.bed",
    output:
        temp("results/bed/{species}_{tissue_tx_model}_{feature}.chr{chrom}.bedtools.bed"),
    shell:
        "../../../scripts/get_bedtools_bed.sh {input} {output}"


rule get_single_species_seq_fa:
    input:
        dna=get_dna_file,
        bed=rules.reformat_bed_file_for_bedtools.output,
    output:
        temp("results/msa/{species}_{tissue_tx_model}_chr{chrom}_{feature}.tmp.fa"),
    conda:
        "../../../envs/bedtools-v2-27-1.yaml"
    shell:
        "bedtools getfasta -name -s -fi {input.dna} -bed {input.bed} -fo {output}"


rule merge_fasta:
    input:
        rules.get_single_species_seq_fa.output,
    output:
        temp("results/msa/{species}_{tissue_tx_model}_chr{chrom}_{feature}.tmp2.fa"),
    script:
        "../../../scripts/merge_fasta.R"


rule convert_fasta_to_tsv:
    input:
        rules.merge_fasta.output,
    output:
        temp("results/msa/{species}_{tissue_tx_model}_chr{chrom}_{feature}_msa.tsv"),
    params:
        get_NCBI_taxonomic_id,
    shell:
        "../../../scripts/convert_fa_to_tsv2.sh {input} {params} {output}"
