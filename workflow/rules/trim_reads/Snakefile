import os


def get_single_end_fastq_data(wildcards):
    if (
        config["sequence_data_source"] == "ENA"
        or config["sequence_data_source"] == "SRA"
    ):
        return "data/single_end/{accession}.fastq.gz".format(accession=wildcards.accession)
    elif config["sequence_data_source"] == "User":
        if os.path.isfile("data/single_end/{accession}.fastq.gz".format(accession=wildcards.accession)):
            return "data/single_end/{accession}.fastq.gz".format(accession=wildcards.accession)
        elif os.path.isfile("data/single_end/{accession}.fq.gz".format(accession=wildcards.accession)):
            return "data/single_end/{accession}.fq.gz".format(accession=wildcards.accession)
        else:
            raise Exception(
                "You don't seem to have anything stored in data/single_end for {accession}".format(
                    accession=wildcards.accession
                )
            )


def get_paired_end_fastq_data(wildcards):
    if (
        config["sequence_data_source"] == "ENA"
        or config["sequence_data_source"] == "SRA"
    ):
        fastq_list = [
            "data/paired_end/{accession}_1.fastq.gz".format(accession=wildcards.accession),
            "data/paired_end/{accession}_2.fastq.gz".format(accession=wildcards.accession),
        ]
        return fastq_list
    elif config["sequence_data_source"] == "User":
        if os.path.isfile(
            "data/paired_end/{accession}_1.fastq.gz".format(accession=wildcards.accession)
        ) and os.path.isfile(
            "data/paired_end/{accession}_2.fastq.gz".format(accession=wildcards.accession)
        ):
            fastq_list = [
                "data/paired_end/{accession}_1.fastq.gz".format(accession=wildcards.accession),
                "data/paired_end/{accession}_2.fastq.gz".format(accession=wildcards.accession),
            ]
            return fastq_list
        elif os.path.isfile(
            "data/paired_end/{accession}_1.fq.gz".format(accession=wildcards.accession)
        ) and os.path.isfile("data/paired_end/{accession}_2.fq.gz".format(accession=wildcards.accession)):
            fastq_list = [
                "data/paired_end/{accession}_1.fq.gz".format(accession=wildcards.accession),
                "data/paired_end/{accession}_2.fq.gz".format(accession=wildcards.accession),
            ]
            return fastq_list
        else:
            raise Exception(
                "You don't seem to have both mate files for {accession} stored in data/paired_end".format(
                    accession=wildcards.accession
                )
            )


rule trim_single_end_reads:
    input:
        get_single_end_fastq_data,
    output:
        "results/trimmed_fastq/{accession}_trimmed.fq.gz",
    conda:
        "workflow/envs/trim-galore.yaml"
    shell:
        "trim_galore --output_dir results/trimmed_fastq/  --length {config[trim_galore.length]} --stringency {config[trim_galore.stringency]} {input}"


rule trim_paired_end_reads:
    input:
        get_paired_end_fastq_data,
    output:
        "results/trimmed_fastq/{accession}_1_val_1.fq.gz",
        "results/trimmed_fastq/{accession}_2_val_2.fq.gz",
    conda:
        "workflow/envs/trim-galore.yaml"
    shell:
        "trim_galore --output_dir results/trimmed_fastq/ --length  {config[trim_galore.length]} --stringency {config[trim_galore.stringency]}  --paired {input[0]} {input[1]}"
