#    FilTar: Integrating RNA-Seq data to improve microRNA target prediction accuracy in animals
#    Copyright (C) 2019 Thomas Bradley
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>


def get_tax_id(wildcards):
    return config["tax_ids"][wildcards.species]

# download and patch scripts ----

rule download_targetscan_data1:
    output:
        "workflow/scripts/targetscan7/targetscan_70.pl",
    shell:
        "cd scripts/targetscan7 && wget http://www.targetscan.org/vert_72/vert_72_data_download/targetscan_70.zip && \\"
        "unzip targetscan_70.zip && \\"
        "rm UTR_Sequences_sample.txt miR_Family_info_sample.txt targetscan_70_output.txt README_70.txt targetscan_70.zip"

rule download_targetscan_data2:
    output:
        bins_script="workflow/scripts/targetscan7/targetscan_70_BL_bins.pl",
        PCT_script="workflow/scripts/targetscan7/targetscan_70_BL_PCT.pl",
        PCT_parameters=directory("data/PCT_parameters"),
    shell:
        "wget http://www.targetscan.org/vert_72/vert_72_data_download/targetscan_70_BL_PCT.zip && unzip targetscan_70_BL_PCT.zip && mv\
  TargetScan7_BL_PCT/PCT_parameters data/ && mv TargetScan7_BL_PCT/targetscan_70_BL_bins.pl TargetScan7_BL_PCT/targetscan_70_BL_PCT.pl scripts/targetscan7 && rm -rf targetscan_70_BL_PCT.zip TargetScan7_BL_PCT/"


rule download_targetscan_data3:
    output:
        agarwal_par="workflow/scripts/targetscan7/Agarwal_2015_parameters.txt",
        contextpp_script="workflow/scripts/targetscan7/targetscan_70_context_scores.pl",
        eightmer_script="workflow/scripts/targetscan7/targetscan_count_8mers.pl",
        TA_pars="workflow/scripts/targetscan7/TA_SPS_by_seed_region.txt",
    shell:
        "wget http://www.targetscan.org/vert_72/vert_72_data_download/TargetScan7_context_scores.zip && unzip TargetScan7_context_scores.zip && mv TargetScan7_context_scores/Agarwal_2015_parameters.txt TargetScan7_context_scores/TA_SPS_by_seed_region.txt TargetScan7_context_scores/targetscan_count_8mers.pl TargetScan7_context_scores/targetscan_70_context_scores.pl scripts/targetscan7/ && rm -rf TargetScan7_context_scores/ TargetScan7_context_scores.zip"


rule patch_bin_lengths_script:
    input:
        rules.download_targetscan_data2.output.bins_script,
    output:
        "workflow/scripts/targetscan7/targetscan_70_BL_bins.patch.pl",
    shell:
        "sed -e '40 s/9606/$ARGV[1]/g' {input} | sed -e '38 s;PCT_parameters;data\/PCT_parameters;g' > {output} && chmod +x {output}"


rule patch_PCT_script:
    input:
        rules.download_targetscan_data2.output.PCT_script,
    output:
        "workflow/scripts/targetscan7/targetscan_70_BL_PCT.patch.pl",
    shell:
        "sed -e '55 s;PCT_parameters;data\/PCT_parameters;g' {input} > {output} && chmod +x {output}"


rule patch_contextpp_script:
    input:
        contextpp=rules.download_targetscan_data3.output.contextpp_script,
        patch="workflow/scripts/targetscan7/patch_context_scores.sh",
    output:
        "workflow/scripts/targetscan7/targetscan_70_context_scores.patch.pl",
    shell:
        "{input.patch} {input.contextpp} {output} && chmod +x {output}"  # force reference species as a parameter

### miRNA prep ###

rule prep_mirna_seeds:
    input:
        data="data/mature.fa",
        script="workflow/scripts/get_mirna_seeds.sh",
    output:
        "results/mature_mirna_seed.tsv",
    shell:
        "{input.script} {input.data} > {output}"


rule prep_mirna_family_file:
    input:
        mature_mirna_seeds=rules.prep_mirna_seeds.output,
    output:
        temp("results/{species}_mirna_family_tmp.tsv"),
    script:
        "workflow/scripts/get_mirna_family.R"


rule prep_mirna_mature_alt:
    input:
        data="data/mature.fa",
        script="workflow/scripts/prep_mirna_mature_alt.sh",
    output:
        temp("results/{species}_mature_mirna.tsv"),
    params:
        get_tax_id,
    shell:
        "{input.script} {input.data} {wildcards.species} {params} > {output}"


rule prep_mir_for_context_scores:
    input:
        mature_mirnas=rules.prep_mirna_mature_alt.output,
        mirna_seed=rules.prep_mirna_family_file.output,
    output:
        temp("results/{species}_mir_for_context_scores_tmp.tsv"),
    script:
        "workflow/scripts/get_mirna_context.R"


rule filter_mir_for_context_scores:
    input:
        rules.prep_mir_for_context_scores.output,
    output:
        temp("results/{species}_mir_for_context_scores.tsv"),
    script:
        "workflow/scripts/filter_mir_for_context_scores.R"


rule filter_mir_families:
    input:
        mirna_families=rules.prep_mirna_family_file.output,
        mature_mirnas=rules.filter_mir_for_context_scores.output,
    output:
        temp("results/{species}_mirna_family.tsv"),
    script:
        "workflow/scripts/filter_mir_families.R"


### main ###


rule targetscan_sites:
    input:
        msa="results/msa/{species}_{tissue_tx_model}_chr{chrom}_3UTR_msa.tsv",
        mirna_families=rules.filter_mir_families.output,
        script=rules.download_targetscan_data1.output,
    conda:
        "../../../envs/targetscan.yaml"
    output:
        temp("results/targets/{species}_{tissue_tx_model}_chr{chrom}_msa.sites.tsv"),
    shell:
        "{input.script} {input.mirna_families} {input.msa} {output}"


rule targetscan_branch_lengths:
    input:
        msa_3UTR="results/msa/{species}_{tissue_tx_model}_chr{chrom}_3UTR_msa.tsv",
        script=rules.patch_bin_lengths_script.output,
    output:
        temp("results/targets/{species}_{tissue_tx_model}_chr{chrom}_msa.branch_lengths.tsv"),
    params:
        tax_id=get_tax_id,
    conda:
        "../../../envs/targetscan.yaml"
    shell:
        "{input.script} {input.msa_3UTR} {params.tax_id}  > {output}"


rule targetscan_PCTs:
    input:
        mirna_family=rules.filter_mir_families.output,
        mirna_sites=rules.targetscan_sites.output,
        branch_lengths=rules.targetscan_branch_lengths.output,
        script=rules.patch_PCT_script.output,
        PCT_param=rules.download_targetscan_data2.output.PCT_parameters,
    conda:
        "../../../envs/targetscan.yaml"
    output:
        temp("results/targets/{species}_{tissue_tx_model}_chr{chrom}_msa.PCTs.tsv"),
        temp("results/targets/{species}_{tissue_tx_model}_chr{chrom}_msa.sites.tsv.sort.txt"),  # this has to be deleted
    shell:
        "{input.script} {input.mirna_family} {input.mirna_sites} {input.branch_lengths} > {output}"


rule targetscan_eightmers:
    input:
        mirna_seeds=rules.filter_mir_families.output,
        CDS="results/msa/{species}_{tissue_tx_model}_chr{chrom}_CDS_msa.tsv",
        script=rules.download_targetscan_data3.output.eightmer_script,
    conda:
        "../../../envs/targetscan.yaml"
    output:
        eightmer_counts=temp(
            "results/targets/{species}_{tissue_tx_model}_chr{chrom}_msa.eightmers.tsv"
        ),
        CDS_lengths=temp(
            "results/msa/{species}_{tissue_tx_model}_chr{chrom}_CDS_msa.tsv.lengths.txt"
        ),
    shell:
        "{input.script} {input.mirna_seeds} {input.CDS} > {output.eightmer_counts}"


rule targetscan_context_scores:
    input:
        mirnas=rules.filter_mir_for_context_scores.output,
        msa="results/msa/{species}_{tissue_tx_model}_chr{chrom}_3UTR_msa.tsv",
        PCTs=rules.targetscan_PCTs.output[0],
        CDS_lengths=rules.targetscan_eightmers.output.CDS_lengths,
        eightmer_counts=rules.targetscan_eightmers.output.eightmer_counts,
        contextpp_script=rules.patch_contextpp_script.output,
        agarwal_param=rules.download_targetscan_data3.output.agarwal_par,
        AIRs="results/targets/{species}_{tissue_tx_model}_chr{chrom}.AIRs.txt",
        TA_SPS_param=rules.download_targetscan_data3.output.TA_pars,
        script=rules.patch_contextpp_script.output,
    conda:
        "../../../envs/targetscan.yaml"
    # "../../envs/viennarna.yaml"
    output:
        temp("results/targets/{species}_{tissue_tx_model}_chr{chrom}_msa.contextpp.tmp.tsv"),
    params:
        RNAplfold_dir="results/targets/RNAplfold/{species}/{tissue_tx_model}",
        tax_id=get_tax_id,
    shell:
        "{input.script} {input.mirnas} {input.msa} {input.PCTs} {input.CDS_lengths} {input.eightmer_counts} {output} {params.tax_id} {input.AIRs} {params.RNAplfold_dir}"


rule aggregate_contextpp_scores:
    input:
        lambda wildcards: expand(
            rules.targetscan_context_scores.output[0],
            chrom=config["chromosomes"][wildcards.species],
            species=wildcards.species,
            tissue_tx_model=wildcards.tissue_tx_model,
        ),
    conda:
        "../../../envs/targetscan.yaml"
    output:
        temp("results/targets/{species}/{tissue_tx_model}.contextpp.tmp.tsv"),
    shell:
        "cat {input} | sed '1b;/Gene/d' > {output}"


rule aggregate_targetscan_sites:
    input:
        lambda wildcards: expand(
            rules.targetscan_sites.output[0],
            chrom=config["chromosomes"][wildcards.species],
            species=wildcards.species,
            tissue_tx_model=wildcards.tissue_tx_model,
        ),
    output:
        temp("results/targets/{species}/{tissue_tx_model}.sites.tsv"),
    shell:
        "cat {input} | sed '1b;/Gene/d' > {output}"


### other ###

rule get_all_transcripts:
    input:
        "results/bed/{species}_{tissue_tx_model}.utr.full.bed",
    output:
        "results/bed/{species}_{tissue_tx_model}_all_transcripts.txt",
    shell:
        "awk '{{ print $5}}' {input} | sort | uniq > {output}"


# Expression filtering rules (merged from with_reannotation and without_reannotation)

# This rule is intended for testing and CI/CD purposes.
# It allows running the pipeline on smaller, per-chromosome data inputs,
# enabling faster and more efficient testing of the codebase.
# By filtering context++ scores using expression values and a configurable TPM threshold,
# this rule helps validate the workflow logic without requiring full-scale data processing.
rule expression_filter_contextpp_scores_chr:
    input:
        contextpp_scores=rules.targetscan_context_scores.output,
        expression_values=rules.salmon_average_quantmerge_samples.output,
    params:
        tpm_expression_threshold=config["TPM_expression_threshold"],
    output:
        temp("results/targets/{species}/{tissue_tx_model}_3UTRs/{tissue_tx_exp}_chr{chrom}.contextpp.tsv"),
    wildcard_constraints:
        tissue_tx_exp=config["context"],
    script:
        "workflow/scripts/filter_contextpp_scores.R"


if config["context"] != "reference":

    rule expression_filter_contextpp_scores:
        input:
            contextpp_scores="results/targets/{species}/{context}.contextpp.tmp.tsv".format(
                species=config["species"], 
                context=config["context"] if config["reannotation"] else "nr"
            ),
            expression_values="results/salmon/{species}/{context}.sf".format(
                species=config["species"], 
                context=config["context"]
            ),
        params:
            tpm_expression_threshold=config["TPM_expression_threshold"],
        output:
            "target_predictions.txt",
        script:
            "workflow/scripts/filter_contextpp_scores.R"

elif config["context"] == "reference":

    rule expression_filter_contextpp_scores:
        input:
            contextpp_scores="results/targets/{species}/{context}.contextpp.tmp.tsv".format(
                species=config["species"], 
                context=config["context"] if config["reannotation"] else "nr"
            ),
        output:
            "target_predictions.txt",
        shell:
            "cp {input} {output}"